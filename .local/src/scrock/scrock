#!/bin/sh
# This script locks the screen with user-defined backend

# variables and defaults
scrock_dir="$XDG_CONFIG_HOME/scrock"
scrock_file=scrockrc
scrock_path="$scrock_dir/$scrock_file"
scrock_pid=/tmp/scrock.pid
scrock_dunst=0
scrock_idle=5
scrock_exe="$(basename "$0")"
scrock_mouse=''

# Prints help.
scrock_help()
{
	cut -c 2- >&2 <<EOF
	Usage: $scrock_exe [option]
	Options:
		-h, --help                      Display this help
		--create-config                 Create new sample configuration in $scrock_path(.new)
		                                .new is added if the configuration exists already
		-d, --daemon start|stop|status  Autolock after idle time (enable/disable)

	If no options are specified, scrock is run normally (see README).
EOF
}

# Creates configuration file.
scrock_create_configs()
{
	scrock_path_new="$scrock_path"
	[ -d "$scrock_dir" ] || mkdir "$scrock_dir"
	[ -e "$scrock_path" ] && scrock_path_new="${scrock_path_new}.new"
	cut -c 2- >"$scrock_path_new" <<EOF
	#!/bin/sh
	# scrock (screen lock) configuration file.
	# See https://github.com/ayekat/dotfiles/tree/master/.local/src/scrock for more
	# information.

	# Command to be run when scrock is started (MANDATORY):
	SCROCK_CMD=''
	# Examples:
	#SCROCK_CMD='i3lock -n -i /path/to/wallpaper.png'
	#SCROCK_CMD=slock
	#SCROCK_CMD=xtrlock
	#SCROCK_CMD='xscreensaver-command -lock'

	# PID file:
	SCROCK_PID=/tmp/scrock.pid

	# Disable dunst while running the screen lock programme?
	SCROCK_DUNST=0

	# Idle time (in minutes) until automatic lock (for daemon mode):
	SCROCK_IDLE=5

	# Mouse device (get name with 'xinput list'):
	SCROCK_MOUSE=''
	# Examples:
	#SCROCK_MOUSE='TPPS/2 IBM TrackPoint'
EOF
	echo "Created sample configuration in ${scrock_path_new}" >&2
}

# Prints error message for invalid $SCROCK_CMD.
scrock_cmd_missing()
{
	echo '$SCROCK_CMD is missing. Please check your configuration.' >&2
}

# Prints error message for missing xautolock.
scrock_xautolock()
{
	echo 'Could not find an xautolock installation on the system. Aborting daemon mode.' >&2
}

# Creates a PID file or fails if it already exists.
scrock_pidlock()
{
	if [ ! -e "$scrock_pid" ]; then
		echo $$ > "$scrock_pid"
		return 0
	fi
	pid="$(cat "$scrock_pid")"
	cut -c 2- >&2 <<EOF
	A scrock instance seems to be running already (PID: $pid).
	If you are sure your screen is not locked, you may remove the PID file ($scrock_pid).
EOF
	return 1
}

# check command line
case "$1" in
	--create-config) scrock_create_configs; exit 1;;
	''|-d|--daemon) continue;;
	*) scrock_help; exit 8;;
esac

# load configuation or create it
[ -e "$scrock_path" ] || { scrock_create_configs; exit 1; }
source "$scrock_path"
[ -n "$SCROCK_CMD" ] && scrock_cmd="$SCROCK_CMD" || { scrock_cmd_missing; exit 4; }
[ -n "$SCROCK_PID" ] && scrock_pid="$SCROCK_PID"
[ -n "$SCROCK_DUNST" ] && scrock_dunst="$SCROCK_DUNST"
[ -n "$SCROCK_IDLE" ] && scrock_idle="$SCROCK_IDLE"
[ -n "$SCROCK_MOUSE" ] && scrock_mouse="$SCROCK_MOUSE"

# check command line (for daemon mode)
if [ "$1" = '-d' ] || [ "$1" = '--daemon' ]; then
	which xautolock >/dev/null || { scrock_xautolock; exit 16; }
	case "$2" in
		start)
			xautolock -time "$scrock_idle" -locker scrock &
			echo "$scrock_exe: starting daemon (timeout: ${scrock_idle}min)"
			;;
		stop)
			echo "$scrock_exe: stopping daemon"
			xautolock -exit
			;;
		status)
			if [ -n "$(pgrep xautolock)" ]; then
				echo 'running'
			else
				echo 'stopped'
			fi
			;;
		*) scrock_help; exit 8 ;;
	esac
	exit 0
fi

# try to lock scrock
scrock_pidlock || exit 2

# pause dunst
if [ $scrock_dunst -eq 1 ]; then
	killall -SIGUSR1 dunst
fi

# disable mouse
if [ -n "$scrock_mouse" ]; then
	xinput set-prop "$scrock_mouse" 'Device Enabled' 0
fi

#echo "running $scrock_cmd"
eval "$scrock_cmd"

# reenable mouse
if [ -n "$scrock_mouse" ]; then
	xinput set-prop "$scrock_mouse" 'Device Enabled' 1
fi

# resume dunst
if [ $scrock_dunst -eq 1 ]; then
	killall -SIGUSR2 dunst
	sleep 1
	notify-send 'Screen unlocked'
fi

# unlock scrock
rm "$scrock_pid"
