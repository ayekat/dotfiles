#!/usr/bin/env sh
# Configuration for interactive shells.
# Written by ayekat on a warm summer day in 2013.

# Helper:
cmd_exists()
{
	for c in "$@"; do
		which "$c" >/dev/null 2>&1 || return 1
	done
}

# ------------------------------------------------------------------------------
# START {{{

# If logged in via SSH, start or reattach to tmux session:
if [ -n "$SSH_CONNECTION" ] && [ -z "$TMUX" ] && cmd_exists tmux tmx; then
	tmx SSH && exit
fi

# }}}
# ------------------------------------------------------------------------------
# LOOK & FEEL {{{

# Set output style for `ls` in coreutils>=8.25:
export QUOTING_STYLE=literal

# Set colours for ls:
export LS_COLORS='fi=0:di=34:ex=32:ln=36:or=1;36:mi=1;31:bd=1;33:cd=33:pi=35:so=1;35'
#                 file dir   exec  link  orphan          block   char  pipe  socket
#                                        link    target

# Set colours for gcc:
export GCC_COLORS='error=01;31:warning=33:note=36:caret=01;32:locus=37:quote=32'

# Set colours for less, man:
LESS_TERMCAP_me="$(printf "\033[0m")"
LESS_TERMCAP_se="$(printf "\033[0m")"
LESS_TERMCAP_so="$(printf "\033[30;43m")"
LESS_TERMCAP_ue="$(printf "\033[0m")"
LESS_TERMCAP_us="$(printf "\033[32m")"
LESS_TERMCAP_mb="$(printf "\033[34m")"
LESS_TERMCAP_md="$(printf "\033[31m")"
export LESS_TERMCAP_mb
export LESS_TERMCAP_md
export LESS_TERMCAP_me
export LESS_TERMCAP_se
export LESS_TERMCAP_so
export LESS_TERMCAP_ue
export LESS_TERMCAP_us

# Aliases:
alias cp='cp -i'
alias grep='grep --color=auto'
alias info='info --vi-keys'
alias la='ls -A'
alias lah='ll -A'
alias laht='ll -At'
alias ll='ls -lh --time-style=long-iso'
alias mv='mv -i'
alias todo='grep -n -R "TODO\|FIXME\|XXX" .'
alias view='vim -R'
if [ "$OS_RELEASE" = 'darwin' ]; then
	alias ls='ls -G'
else
	alias ls='ls --color=auto'
fi

# Application specific aliases:
cmd_exists valgrind && alias valgrind='valgrind --log-file=valgrind.log'

# Server only aliases (mostly additional security):
if [ -n "$SSH_CONNECTION" ]; then
	alias rm='rm -i'
fi

# }}}
# ------------------------------------------------------------------------------
# PROMPT {{{

# Prompt colours:
pc_vcs_huge="$(printf "\033[1;30m")"
pc_vcs_clean="$(printf "\033[32m")"
pc_vcs_ahead="$(printf "\033[36m")"
pc_vcs_ready="$(printf "\033[33m")"
pc_vcs_dirty="$(printf "\033[31m")"
pc_vcs_merge="$(printf "\033[1;31m")"
pc_dot_ahead="$(printf "\033[30;46m")"
pc_dot_ready="$(printf "\033[30;43m")"
pc_dot_dirty="$(printf "\033[30;41m")"
pc_dot_merge="$(printf "\033[30;41m")"
pc_host=$(printf "\033[35m")
pc_pwd=$(printf "\033[34m")
pc_prompt=$(printf "\033[1;31m")
pc_jobs=$(printf "\033[30;47m")

# VCS:
vcs_state=''
vcs_branch=''
gstat() { git -C "$1" status --porcelain 2>/dev/null; }
ghead() { git -C "$1" status --porcelain -b 2>/dev/null | head -n 1; }
vcs_update()
{
	# This machine is slow, so don't print git repository information in prompt:
	[ "$(hostname)" != 'ds-wrk3' ] || return

	# Update information if not in a blacklisted (read: huge) repo:
	case "$1" in
		"$HOME"/dev/linux*|"$HOME"/dev/mono*|"$HOME"/dev/gnu/projects/gnu-social*)
			vcs_branch='kernel'
			vcs_state='huge'
			;;
		*)
			vcs_state=''
			vcs_branch="$(ghead "$1" | cut -d '.' -f 1 | cut -d ' ' -f 2)"
			if [ -n "$vcs_branch" ]; then
				vcs_state='clean'
				ghead "$1" | grep -o 'ahead' >/dev/null && vcs_state='ahead'
				gstat "$1" | grep  '^[MADR].' >/dev/null && vcs_state='ready'
				gstat "$1" | grep  '^.[M?D]' >/dev/null && vcs_state='dirty'
				gstat "$1" | grep  'UU' >/dev/null && vcs_state='merge'
			fi
			;;
	esac
}

# }}}
# ------------------------------------------------------------------------------
