# Configuration for interactive shells.
# Written by ayekat on a warm summer day in 2013.

# Helper:
cmd_exists()
{
	for c in "$@"; do
		which "$c" >/dev/null 2>&1 || return 1
	done
}

# }}}
# ------------------------------------------------------------------------------
# LOOK & FEEL {{{

# Set output style for `ls` in coreutils>=8.25:
export QUOTING_STYLE=literal

# Set colours for ls:
export LS_COLORS='fi=0:di=34:ex=32:ln=36:or=1;36:mi=1;31:bd=1;33:cd=33:pi=35:so=1;35'
#                 file dir   exec  link  orphan          block   char  pipe  socket
#                                        link    target

# Set colours for gcc:
export GCC_COLORS='error=01;31:warning=33:note=36:caret=01;32:locus=37:quote=32'

# Set colours for less, man:
LESS_TERMCAP_me="$(printf "\033[0m")"
LESS_TERMCAP_se="$(printf "\033[0m")"
LESS_TERMCAP_so="$(printf "\033[30;43m")"
LESS_TERMCAP_ue="$(printf "\033[0m")"
LESS_TERMCAP_us="$(printf "\033[32m")"
LESS_TERMCAP_mb="$(printf "\033[34m")"
LESS_TERMCAP_md="$(printf "\033[31m")"
export LESS_TERMCAP_mb LESS_TERMCAP_md LESS_TERMCAP_me LESS_TERMCAP_se \
       LESS_TERMCAP_so LESS_TERMCAP_ue LESS_TERMCAP_us

# Aliases:
alias cp='cp -i'
alias grep='grep --color=auto'
alias info='info --vi-keys'
alias la='ls -A'
alias lah='ll -A'
alias laht='ll -At'
alias ll='ls -lh --time-style=long-iso'
alias mv='mv -i'
alias todo='grep -n -R "TODO\|FIXME\|XXX" .'
alias view='vim -R'
if [ "$OS_NAME" = 'darwin' ]; then
	alias ls='ls -G'
else
	alias ls='ls --color=auto'
fi

# Server only aliases (mostly additional security):
if [ -n "$SSH_CONNECTION" ]; then
	alias rm='rm -i'
fi

# }}}
# ------------------------------------------------------------------------------
# PROMPT {{{

# Prompt colours:
pc_vcs_huge="$(printf "\033[1;30m")"
pc_vcs_clean="$(printf "\033[32m")"
pc_vcs_ahead="$(printf "\033[36m")"
pc_vcs_ready="$(printf "\033[33m")"
pc_vcs_dirty="$(printf "\033[31m")"
pc_vcs_merge="$(printf "\033[1;31m")"
pc_host=$(printf "\033[35m")
pc_pwd=$(printf "\033[34m")
pc_prompt=$(printf "\033[1;31m")
pc_jobs=$(printf "\033[30;47m")

# VCS
# vcs_state and vcs_branch are set by calling vcs_update() with the path to the
# git repository.
vcs_state=''
vcs_branch=''
vcs_update()
{
	# Don't calculate git repo infos on slow machines or huge repositories:
	case "$(hostname)" in
		ds-wrk3)
			vcs_branch='git'
			vcs_state='slow'
			return ;;
	esac
	case "$1" in
		"$HOME"/dev/linux)
			vcs_branch='git'
			vcs_state='huge'
			return ;;
	esac

	git_head="$(git -C "$1" status --porcelain -b 2>/dev/null | head -n 1)"
	vcs_state=''
	vcs_branch="$(echo "$git_head" | sed -e 's/^## \([^.]\+\).*/\1/g')"
	if [ -n "$vcs_branch" ]; then
		vcs_state='clean'
		if echo "$git_head" | grep ' \[ahead [0-9]\+\]$' >/dev/null; then
			vcs_state='ahead'
		fi
		case "$(git -C "$1" status --porcelain 2>/dev/null)" in
			UU*)     vcs_state='merge' ;;
			?[M?D]*) vcs_state='dirty' ;;
			[MADR]*) vcs_state='ready' ;;
		esac
	fi
	unset git_head
}

# }}}
# ------------------------------------------------------------------------------
