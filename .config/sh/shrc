#!/bin/sh
# Unified shell configuration file for bash and zsh.
# Written by ayekat on a warm summer day in 2013.


# ------------------------------------------------------------------------------
# META {{{

# Make sure the environment is loaded correctly:
[ -e ~/.config/sh/environment ] && . ~/.config/sh/environment

# }}}
# ------------------------------------------------------------------------------
# SYSTEM {{{

# Read operating system information (if available):
if [ -e /etc/os-release ]; then
	DISTRIBUTION="$(grep -e '^ID=' /etc/os-release | cut -c 4-)"
elif [ "$(uname)" = 'Darwin' ]; then
	DISTRIBUTION='darwin'
elif [ -e /etc/gentoo-release ]; then
	DISTRIBUTION='gentoo'
else
	DISTRIBUTION='unknown'
fi
export DISTRIBUTION

# }}}
# ------------------------------------------------------------------------------
# FUNCTIONS/ALIASES {{{

# Distribution logos:
printlogo() {
	case "$1" in
		debian)
			printf "\033[31m                             \n"
			printf         "          .xd§PVkbxc.        \n"
			printf         "         xP*'      'Vb.      \n"
			printf         "       'd'     .,.   V.\`     \n"
			printf         "       (*    .'   .  ::      \033[0m `uname -s -r`\n"
			printf "\033[31m       #     #      ,7       \033[0m on `uname -n`\n"
			printf "\033[31m       V,     *-__ -'        \n"
			printf         "       'qb                   \n"
			printf         "         *:,                 \n"
			printf         "           '-.               \n"
			printf         "               '             \n"
			printf  "\033[0m                             \n"
			;;
		arch)
			printf "\033[34m                             \n"
			printf         "              /\\            \n"
			printf         "             /AA\\           \n"
			printf         "            .'YAA\\          \n"
			printf         "           /AAAAAA\\         \033[0m `uname -s -r`\n"
			printf "\033[34m          /AAAAAAAA\\        \033[0m on `uname -n`\n"
			printf "\033[34m         /AAA/  \\AAA\\      \n"
			printf         "        /AAA|    |AAP\\      \n"
			printf         "       /AAAY\\    /YAAa_     \n"
			printf         "      />*'          '*<\\    \n"
			printf         "     ^                  ^    \n"
			printf  "\033[0m                             \n"
			;;
		darwin)
			printf "\033[32m                  .          \n"
			printf         "               .dA'          \n"
			printf         "               AP'           \n"
			printf         "        .dAAbx.,dAAAb.       \n"
			printf "\033[33m       dAAAAAAAAAAAAP        \033[0m `uname -s -r`\n"
			printf "\033[31m      :AAAAAAAAAAAAA         \033[0m on `uname -n`\n"
			printf "\033[31m      'AAAAAAAAAAAAA.        \n"
			printf "\033[35m       YAAAAAAAAAAAAAx.      \n"
			printf "\033[34m        \\AAAAAAAAAAAAP      \n"
			printf "\033[36m         '<AV*''*\\AP'       \n"
			printf         "                             \n"
			printf  "\033[0m                             \n"
			;;
		gentoo)
			printf "\033[36m           __                \n"
			printf         "       .-d§§§§§bc,           \n"
			printf         "      /§§§§§*\"*Y§§§c.       \n"
			printf         "     (§§§§§§.   )§§§§b,      \n"
			printf         "     '(§§§§§§bxxI§§§§§§b     \033[0m $(uname -s -r)\n"
			printf "\033[36m       \`\">§§§§§§§§§§§§§§)  \033[0m on $(uname -n)\n"
			printf "\033[36m       .?§§§§§§§§§§§§§P\`    \n"
			printf         "     .A§§§§§§§§§§§§§*'       \n"
			printf         "     §§§§§§§§§§§\$*\`        \n"
			printf         "     V§§§§§§§*'\`            \n"
			printf         "       \`\"\`\`              \n"
			printf  "\033[0m                             \n"
			;;
		ubuntu)
			printf "\033[35m                              \n"
			printf         "          .-x#XXX#:-.         \n"
			printf         "       .dXXXXXXXXY*\"<Xb.     \n"
			printf         "      dXXXXP(^\`\`\`'._.XXXb  \n"
			printf         "     JXXXP' _\\\\a#a,. 'VXXXA \n"
			printf         "    |XP\"*. .XXXXXXD. 'XXXX)  \033[0m $(uname -s -r)\n"
			printf "\033[35m    (X.  ; (XXXXXXXT''XXXX)   \033[0m on $(uname -n)\n"
			printf "\033[35m    'XXXX. \`\\XXXXXP  .XXXX' \n"
			printf         "     *XXXXb./ \`\` ,·-dXXXX/  \n"
			printf         "      'YXXXXX#a-a|  .XXY'     \n"
			printf         "        '+XXXXXXXXX#XP'       \n"
			printf         "           \`'\"***\"'\`      \n"
			printf "\033[0m                               \n"
			;;
	esac
}

cmd_exists() {
	for c in $@; do
		which $c >/dev/null 2>&1 || return 1
	done
	return 0
}

# Aliases:
alias cp='cp -i'
alias grep='grep --color=auto'
alias info='info --vi-keys'
alias la='ls -A'
alias lah='ls -lAh'
alias laht='ls -lAht'
alias ll='ls -lh'
alias mv='mv -i'
[ "$DISTRIBUTION" = 'darwin' ] && alias ls='ls -G' || alias ls='ls --color=auto'

# Application specific aliases:
cmd_exists valgrind && alias valgrind='valgrind --log-file=valgrind.log'
cmd_exists ncmpcpp && alias ncmpcpp='ncmpcpp -c ~/.config/ncmpcpp/config'
cmd_exists uim-fep mutt && alias mutt='uim-fep -e mutt'
cmd_exists uim-fep irssi && alias irssi='uim-fep -e irssi'
cmd_exists sudo && alias sudo="sudo -p '[sudo] password: '"
cmd_exists startx && alias startx="$(which -a startx) $XINITRC"

# Server only aliases (mostly additional security):
if [ -n "$SSH_TTY" ]; then
	alias rm='rm -i'
fi

# }}}
# ------------------------------------------------------------------------------
# SHORTCUTS {{{

# if the folder does not exist, cd will try in $CDPATH before failing:
case "$(hostname)" in
	ixh) CDPATH=".:$HOME/epfl" ;;
#	penrose) CDPATH=".:~/db/project" ;;
esac

# }}}
#-------------------------------------------------------------------------------
# PKGFILE {{{

# On Arch, if an unknown command is issued, pkgfile will answer where the
# command might possibly be found:
#if [ "$DISTRIBUTION" = 'arch' ]; then
#	pkgfilesrc="/usr/share/doc/pkgfile/command-not-found.$(basename $SHELL)"
#	[ -e "$pkgfilesrc" ] && . "$pkgfilesrc"
#	unset pkgfilesrc
#fi

# }}}
# ------------------------------------------------------------------------------
# START-UP ACTIONS {{{

# If logged in via SSH, start or reattach to tmux session:
[ -n "$SSH_TTY" ] && [ -z "$TMUX" ] && cmd_exists tmux && cmd_exists tmx &&
	tmx SSH && exit

# If in tmux, the PATH variable is fucked up, so fix this here:
[ -n "$TMUX" ] && . $XDG_CONFIG_HOME/sh/environment

# Print distribution logo:
printlogo "$DISTRIBUTION"

# Display the todo file in the home directory:
[ -e "$HOME"/TODO ] && { echo; cat "$HOME"/TODO; echo; }

# }}}
