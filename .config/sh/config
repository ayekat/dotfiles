#!/usr/bin/env sh
# Configuration for interactive shells.
# Written by ayekat on a warm summer day in 2013.

# Helper:
cmd_exists()
{
	for c in $@; do
		which $c >/dev/null 2>&1 || return -1
	done
}

# ------------------------------------------------------------------------------
# START {{{

# If logged in via SSH, start or reattach to tmux session:
if [ -n "$SSH_CONNECTION" ] && [ -z "$TMUX" ] && cmd_exists tmux tmx; then
	tmx SSH && exit
fi

# }}}
# ------------------------------------------------------------------------------
# FUNCTIONS/ALIASES {{{

# Aliases:
alias cp='cp -i'
alias grep='grep --color=auto'
alias info='info --vi-keys'
alias la='ls -A'
alias lah='ls -lAh'
alias laht='ls -lAht'
alias ll='ls -lh'
alias mv='mv -i'
alias todo='grep -n -R "TODO\|FIXME\|XXX" .'
if [ "$OS_RELEASE" = 'darwin' ]; then
	alias ls='ls -G'
else
	alias ls='ls --color=auto'
fi

# Application specific aliases:
cmd_exists valgrind && alias valgrind='valgrind --log-file=valgrind.log'
cmd_exists ncmpcpp && alias ncmpcpp='ncmpcpp -c ~/.config/ncmpcpp/config'
cmd_exists uim-fep mutt && alias mutt="uim-fep -e mutt -F $XDG_CONFIG_HOME/mutt/muttrc"
cmd_exists uim-fep irssi && alias irssi="uim-fep -e irssi --home=$XDG_CONFIG_HOME/irssi"
cmd_exists startx && alias startx="startx $XINITRC"
cmd_exists mpv && alias mplayer='mpv'
cmd_exists view vim && alias view='vim -R'

# Pass user environment when launching vim with sudo:
if cmd_exists sudo; then
	sudo()
	{
		if { [ "$1" = 'vim' ] || [ "$1" = 'vimdiff' ] || [ "$1" = 'visudo' ]; }\
		&& cmd_exists "$1"; then
			command sudo -E "$@"
		else
			command sudo "$@"
		fi
	}
fi

# Use findmnt instead of mount to list mounted filesystems:
mount()
{
	if [ $# -eq 0 ] && cmd_exists findmnt; then
		echo '>> findmnt'
		findmnt
	else
		command mount "$@"
	fi
}

# Server only aliases (mostly additional security):
if [ -n "$SSH_CONNECTION" ]; then
	alias rm='rm -i'
fi

# In zsh vim mode, I sometimes forget I'm not in vim:
alias :e="$EDITOR"
alias :q=exit

# }}}
# ------------------------------------------------------------------------------
# PROMPT {{{

# Prompt colours:
pc_vcs_kernel=$(printf "\033[1;30m")
pc_vcs_clean=$(printf "\033[32m")
pc_vcs_ahead=$(printf "\033[36m")
pc_vcs_ready=$(printf "\033[33m")
pc_vcs_dirty=$(printf "\033[31m")
pc_vcs_merge=$(printf "\033[1;31m")
pc_host=$(printf "\033[35m")
pc_pwd=$(printf "\033[34m")
pc_prompt=$(printf "\033[1;31m")
pc_jobs=$(printf "\033[47;30m")

# VCS:
vcs_state=''
vcs_branch=''
gstat() { git status --porcelain 2>/dev/null; }
ghead() { git status --porcelain -b 2>/dev/null | head -n 1; }
vcs_update()
{
	# Update information if not in a blacklisted (read: huge) repo:
	case "$(pwd)" in
		$HOME/dev/linux*|$HOME/dev/gnu/projects/gnu-social*)
			vcs_branch='git'
			vcs_state='kernel'
			;;
		*)
			vcs_state=''
			vcs_branch="$(ghead | cut -d '.' -f 1 | cut -d ' ' -f 2)"
			if [ -n "$vcs_branch" ]; then
				vcs_state='clean'
				ghead | grep -o 'ahead' >/dev/null && vcs_state='ahead'
				gstat | grep  '^[MADR].' >/dev/null && vcs_state='ready'
				gstat | grep  '^.[M?D]' >/dev/null && vcs_state='dirty'
				gstat | grep  'UU' >/dev/null && vcs_state='merge'
			fi
			;;
	esac
}

# Background Jobs:
jobs_update()
{
	jobs_count="$(jobs | awk '{print $2}' | grep -v 'Done' | wc -l)"
}

# }}}
# ------------------------------------------------------------------------------
